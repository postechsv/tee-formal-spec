--- This module defines an user App class.

omod PROGRAM-APP is
  pr APP-ID .
  pr IMP-PROGRAM .
  pr K-CONFIG .

--- Version In Paper
  --- class App | prog : Program, proc : KConfig .

--- Model/Implementation Specific Version
  class ProgramApp | proc : KConfig, prog : Program, running : Bool .
endom

--- This module defines ree request data structure.

omod PROGRAM-APP-AUX is
  pr PROGRAM-APP .
  pr SECURE-MONITOR-CALL .
  pr IMP-SEMANTICS .

  var X : Var .
  var T : Type .
  var XL : VarList .
  var V : Value .
  var L : Nat .
  var P : Program .
  var VL : ValueList .
  var KS : KConfig .
  var ENV : Map{Var,Nat} .
  var MEM : Map{Nat,Value?} .
  var FUNC : FuncId .
  var FSIG : FuncSig .
  vars S S' : Stmt .
  var SL : SList .
  var SE : SElem .
  var FMAP : Map{FuncSig,Stmt} .
  var PARAMS : ExpList .
  var CS : Stmt .

  op execute : Program FuncId ValueList -> KConfig .
  op readReturn : FuncId KConfig -> ValueList .

  op mRet : -> Var [ctor] .

  op mkPreStmt : ExpList ValueList -> Stmt .
  eq mkPreStmt((T X, PARAMS), (V,VL)) = T X ; X := V ; mkPreStmt(PARAMS, VL) .
  eq mkPreStmt(nil, nil) = skip .

  op getVars : ExpList -> VarList .
  eq getVars((T X, PARAMS)) = X , getVars(PARAMS) .
  eq getVars(nil) = nil .

  op mkFunMap : Program -> Map{FuncSig,Stmt} .
  eq mkFunMap(P) = mkFunMap(getSList(P)) .

  op mkFunMap : SList -> Map{FuncSig,Stmt} .
  eq mkFunMap(< FSIG {S} > SL) = FSIG |-> S , mkFunMap(SL) .
  eq mkFunMap(< S > SL) = mkFunMap(SL) [owise] .
  eq mkFunMap(nilElem) = empty . --- should be matched with the last statement

  op getParams : FuncId Map{FuncSig,Stmt} -> ExpList .
  eq getParams(FUNC, (T FUNC(PARAMS) |-> S , FMAP)) = PARAMS .
  eq getParams(FUNC, FMAP) = nil [owise] .

  ceq execute(P , FUNC , VL) 
    = run(
        int mRet ; 
        P S 
        mRet := FUNC (XL) ;
      ) 
  if PARAMS := getParams(FUNC, mkFunMap(P)) 
  /\ XL := getVars(PARAMS) /\ S := mkPreStmt(PARAMS, VL) .
  
  ceq readReturn(FUNC, KS env(ENV) store(MEM) fdecl(((T FUNC(PARAMS) |-> S) , FMAP))) 
    = findAllValues((mRet,XL), ENV, MEM) 
  if XL := getVars(PARAMS) . 

  op findAllValues : VarList Map{Var,Nat} Map{Nat,Value?} -> ValueList .
  eq findAllValues((X,XL), ENV, MEM) = findValue(X, ENV, MEM) , findAllValues(XL, ENV, MEM) .
  eq findAllValues(nil, ENV, MEM) = nil .

  op findValue : Var Map{Var,Nat} Map{Nat,Value?} -> Value .
  eq findValue(X, (X |-> L) ; ENV, (L |-> V) ; MEM) = V .
endom