------------------------------------------------------------
--- Client API IMP Value
------------------------------------------------------------

fmod TEE-IMP-API is
  pr QID .
  pr TEE-API .
  pr IMP-FUNC-SIG .

  subsort Qid < Var .
  subsort TeeApi < FuncId .
endfm

--- This module provides a set of aux functions to implement TEE syscall.

fmod TEE-API-IMP-PROG-AUX is
  pr IMP-PROGRAM .
  pr TEE-IMP-API .
  
------------------------------------------------------------
--- Auxiliary functions to make Syscalls
------------------------------------------------------------

  sort SysAnnot .
  ops @inArgs @outArgs : ExpList -> SysAnnot [ctor] .
  op @return : Exp -> SysAnnot [ctor] .
  op @body : Stmt -> SysAnnot [ctor] .
  op @noReturn : -> SysAnnot [ctor] .

  var F : FuncId .
  var T : Type .
  vars XL IN OUT EL : ExpList .
  var E : Exp .
  var S : Stmt .

  op defineSysCall : FuncSig SysAnnot SysAnnot SysAnnot SysAnnot -> Program .
  eq defineSysCall(T F(XL), @inArgs(IN), @outArgs(OUT), @body(S), @return(E))
   = T F(XL) {
        $prep(mkEval(IN))
        $in(nil)
        $waitSysCall(F)
        $out(OUT) 
        S
        return E ;
      } . 
 
  eq defineSysCall(void F(XL), @inArgs(IN), @outArgs(OUT), @body(S), @noReturn)
   = void F(XL) {
        $prep(mkEval(IN))
        $in(nil)
        $waitSysCall(F)
        S
        $out(OUT) 
      } 
  . 

  op mkEval : ExpList -> ExpList .
  eq mkEval(E, EL) = eval(E), mkEval(EL) .
  eq mkEval(nil) = nil .
endfm

--- This module defines IMP values for TEE client API.

mod TEE-CLIENT-IMP-VALUE is
  pr IMP-VALUE .
  pr SESSION-ID .

  op #_ : SessionId -> Value [ctor] .
endm

------------------------------------------------------------
--- Id IMP Value
------------------------------------------------------------

--- This module defines IMP values for ids.

mod ID-IMP-VALUE is
  pr IMP-VALUE .
  pr IMP-FUNC-SIG .
  pr CONFIGURATION .

  op #_ : Oid -> Value [ctor] .
  op #_ : FuncId -> Value [ctor] .
endm

------------------------------------------------------------
--- TEE Return IMP
------------------------------------------------------------

--- This module defines IMP values for API return codes.

fmod RETURN-IMP-VALUE is
  pr IMP-VALUE .
  pr RETURN-CODE .

  op #_ : ReturnCode -> Value [ctor] .
endfm

------------------------------------------------------------
--- Generic object IMP
------------------------------------------------------------

--- This module defines IMP values for generic object.

fmod GENERIC-OBJECT-IMP-VALUE is
  pr IMP-VALUE .
  pr SET{ObjectUsage} .
  pr SET{TeeAttribute} .
  pr SET{AttrId} .
  pr OBJECT-TYPE .
  pr CRYPTO-KEY-SIZE .

  op #_ : ObjectType -> Value [ctor] .
  op #_ : Set{TeeAttribute} -> Value [ctor] .
  op #_ : Set{AttrId} -> Value [ctor] .
  op #_ : AttrContent -> Value [ctor] .
  op #_ : Set{ObjectUsage} -> Value [ctor] .
  op #_ : CryptoKeySize -> Value [ctor] .
endfm

------------------------------------------------------------
--- Persistent object IMP
------------------------------------------------------------

--- This module defines IMP values for persistent object.

fmod PERSISTENT-OBJECT-IMP-VALUE is
  pr IMP-VALUE .
  pr STORAGE-IDENTIFER .
  pr FILE-ID .
  pr SET{DataFlag} .
  pr LIST{Data} .
  pr DATA-SIZE .

  op #_ : StorageIdentifier -> Value [ctor] .
  op #_ : Set{DataFlag} -> Value [ctor] .
  op #_ : List{Data} -> Value [ctor] .
  op #_ : DataSize -> Value [ctor] .
  op #_ : FileId -> Value [ctor] .
endfm

------------------------------------------------------------
--- Data stream object IMP
------------------------------------------------------------

--- This module defines IMP values for data stream object.

fmod DATA-STREAM-OBJECT-IMP-VALUE is
  pr IMP-VALUE .
  pr DATA-POSITION .
  pr DATA-STREAM-SEEK-TYPE .

  op #_ : DataPosition -> Value [ctor] .
  op #_ : SeekType -> Value [ctor] .
endfm

------------------------------------------------------------
--- Cryptographic object IMP
------------------------------------------------------------

--- This module defines IMP values for cryptographic object.

fmod CRYPTO-OPERATION-OBJECT-IMP-VALUE is
  pr IMP-VALUE .
  pr ALGORITHM-IDENTIFIER .
  pr OPERATION-CLASS .
  pr OPERATION-MODE .
  pr CRYPTO-ELEMENT .

  op #_ : AlgorithmIdentifier -> Value [ctor] .
  op #_ : OperationClass -> Value [ctor] .
  op #_ : OperationMode -> Value [ctor] .
  op #_ : CryptoElement -> Value [ctor] .
endfm

------------------------------------------------------------
--- TEE Internal Client API IMP
------------------------------------------------------------

--- This module defines IMP values for cryptographic object.

fmod TEE-INTERNAL-CLIENT-IMP-VALUE is
  pr IMP-VALUE .
  --- pr TEE-UUID .
  pr RETURN-ORIGIN .
  pr APP-ID .
  pr TEE-PARAM-TYPE .
  pr TEE-CANCEL-REQ-TIME .

  op #_ : TeeParamType -> Value [ctor] .
  op #_ : AppId -> Value [ctor] .
  op #_ : ReturnOrigin -> Value [ctor] .
  op #_ : TaCancelTimeOut -> Value [ctor] .
endfm

--- This module defines IMP call and return for TEE API.

fmod TEE-API-IMP-CALL is
  pr TEE-API .
  pr TEE-API-CALL .
  pr TEE-API-RETURN .
  pr SET{TeeApiParam} .
  pr IMP-STMT .

  op makeCall : TeeApi ValueList -> TeeApiCall .
  op makeReturnStmt : TeeApi ReturnCode? Set{TeeApiParam} ExpList -> Stmt .
endfm

fmod TEE-IMP-STRUCT-DECL is
  pr IMP-PROGRAM .

--- object info
  op objectType : -> Var [ctor] .
  op objectSize : -> Var [ctor] .
  op maxObjectSize : -> Var [ctor] . 
  op objectUsage : -> Var [ctor] .
  op dataSize : -> Var [ctor] .
  op dataPosition : -> Var [ctor] .
  op handleFlags : -> Var [ctor] .
  op TeeObjectInfo : -> Var [ctor] .

--- TODO : change this to a list
  op param1 : -> Var [ctor] .
  op param2 : -> Var [ctor] .
  op param3 : -> Var [ctor] .
  op param4 : -> Var [ctor] .
endfm

--- This module defines IMP call and return for transient object functions.

mod TRANSIENT-OBJECT-TEE-CALL is
  pr TEE-API-IMP-CALL .
  pr TRANSIENT-OBJECT-FUNC .
  pr TA-OBJECT .
  pr HANDLE .
  pr HANDLE-ID-GEN .
  pr ID-IMP-VALUE .
  pr RETURN-IMP-VALUE .
  pr GENERIC-OBJECT-IMP-VALUE .
  pr PERSISTENT-OBJECT-IMP-VALUE .
  pr BASIC-DATA .
  pr TEE-API-IMP-PROG-AUX .

  var OBJTYPE : ObjectType .
  var KEYSIZE : CryptoKeySize .
  vars HANDLE HANDLE1 HANDLE2 : HandleId .
  var REF : AttrRef .
  var VAL : AttrVal .
  var V : AttrContent .
  var ATTRS : Set{TeeAttribute} .
  var RET : ReturnCode .
  vars E R H : Exp .
  var EL : ExpList .

------------------------------------------------------------
--- 'TEE_AllocateTransientObject' Syscall
------------------------------------------------------------

  eq makeCall(AllocateTransientObject , (# OBJTYPE , # KEYSIZE)) = apiCall(AllocateTransientObject , (type(OBJTYPE) , size(KEYSIZE))) .
  eq makeReturnStmt(AllocateTransientObject , TEE-SUCCESS , handle(HANDLE) , E) = 
    auto 'ret := # TEE-SUCCESS ;
    E := # HANDLE ; .

  eq makeReturnStmt(AllocateTransientObject , TEE-ERROR-OUT-OF-MEMORY , empty , (H)) = auto 'ret := # TEE-ERROR-OUT-OF-MEMORY ; .
  eq makeReturnStmt(AllocateTransientObject , TEE-ERROR-NOT-SUPPORTED , empty , (H)) = auto 'ret := # TEE-ERROR-NOT-SUPPORTED ; .

  op AllocateTransientObjectLib : -> Program .
  eq AllocateTransientObjectLib 
  = defineSysCall(
      int AllocateTransientObject(auto 'objType, auto 'size, auto * 'handle),
      @inArgs('objType, 'size),                 --- should match with the makeCall              
      @outArgs('handle),                        --- should match with the makeReturnStmt
      @body(skip),
      @return('ret)
  ) .

------------------------------------------------------------
--- 'TEE_FreeTransientObject' Syscall
------------------------------------------------------------

  eq makeCall(FreeTransientObject , (# HANDLE)) = apiCall(FreeTransientObject , handle(HANDLE)) .
  eq makeReturnStmt(FreeTransientObject , noReturnCode , empty , nil) = skip .
  --- TODO: Problem - No canonical states when FreeTransientObject(# TEE-HANDLE-NULL) 
  eq makeReturnStmt(FreeTransientObject , noReturnCode , handle(TEE-HANDLE-NULL) , nil) = skip .

  op FreeTransientObjectLib : -> Program .
  eq FreeTransientObjectLib 
  = defineSysCall(
      int FreeTransientObject(auto * 'handle),
      @inArgs('handle),                     --- should match with the makeCall              
      @outArgs(nil),                        --- should match with the makeReturnStmt
      @body(skip),
      @return(# 1)
  ) .

------------------------------------------------------------
--- 'TEE_ResetTransientObject' Syscall
------------------------------------------------------------

  eq makeCall(ResetTransientObject , (# HANDLE)) = apiCall(ResetTransientObject , handle(HANDLE)) .
  eq makeReturnStmt(ResetTransientObject , noReturnCode , empty , nil) = skip .

  eq makeCall(PopulateTransientObject , (# HANDLE , # ATTRS)) = apiCall(PopulateTransientObject , (handle(HANDLE) , attrs(ATTRS))) .
  eq makeReturnStmt(PopulateTransientObject , RET , empty , R) = $assign(# RET , R) .

  eq makeCall(InitRefAttribute , (# REF , # V)) = apiCall(InitRefAttribute , (constId(REF) , constVal(V))) .
  eq makeCall(InitRefAttribute , (# REF , # attrContentData(V))) = apiCall(InitRefAttribute , (constId(REF) , constVal(V))) .
  eq makeReturnStmt(InitRefAttribute , noReturnCode , attrs(ATTRS) , E) = $assign(# ATTRS , E) .

  eq makeCall(InitValueAttribute , (# VAL , # V)) = apiCall(InitValueAttribute , (constId(VAL) , constVal(V))) .
  eq makeReturnStmt(InitValueAttribute , noReturnCode , attrs(ATTRS) , E) = $assign(# ATTRS , E) .

  eq makeCall(CopyObjectAttributes1 , (# HANDLE1 , # HANDLE2)) = apiCall(CopyObjectAttributes1 , (trgHandle(HANDLE1) , srcHandle(HANDLE2))) .
  eq makeReturnStmt(CopyObjectAttributes1 , RET , empty , E) = $assign(# RET , E) .

  eq makeCall(GenerateKey , (# HANDLE , # KEYSIZE , # ATTRS)) = apiCall(GenerateKey , (handle(HANDLE) , size(KEYSIZE) , attrs(ATTRS))) .
  eq makeReturnStmt(GenerateKey , RET , empty , E) = $assign(# RET , E) .


  op TransientLibs : -> Program .
  eq TransientLibs = 
    AllocateTransientObjectLib
    FreeTransientObjectLib
  .

endm

--- This module defines IMP call and return for persistent object functions.

mod PERSISTENT-OBJECT-TEE-CALL is
  pr TEE-API-IMP-CALL .
  pr HANDLE .
  pr HANDLE-ID-GEN .
  pr ID-IMP-VALUE .
  pr RETURN-IMP-VALUE .
  pr PERSISTENT-OBJECT-FUNC .
  pr PERSISTENT-OBJECT-IMP-VALUE .
  pr TEE-API-IMP-PROG-AUX .

  var STORID : StorageIdentifier .
  var FILE : FileId .
  var DATAFLAGS : Set{DataFlag} .
  vars HANDLE OPTHANDLE : HandleId .
  var DATA : List{Data} .
  var DATASIZE : DataSize .
  var RET : ReturnCode .
  var E : Exp .
  var EL : ExpList .
  vars R H : Exp .

------------------------------------------------------------
--- 'TEE_OpenPersistentObject' Syscall
------------------------------------------------------------

  eq makeCall(OpenPersistentObject , (# STORID , # FILE , # DATAFLAGS)) 
   = apiCall(OpenPersistentObject , (fileId(FILE) , flags(DATAFLAGS))) . 
  eq makeReturnStmt(OpenPersistentObject , RET , handle(HANDLE) , E) = 
    auto 'ret := # RET ;
    E := # HANDLE ; .

  op OpenPersistentObjectLib : -> Program .
  eq OpenPersistentObjectLib 
  = defineSysCall(
      int OpenPersistentObject(auto 'storageId, auto 'fileId, auto 'dataFlags, auto * 'handle),
      @inArgs('storageId, 'fileId, 'dataFlags), --- should match with the makeCall              
      @outArgs('handle),                        --- should match with the makeReturnStmt
      @body(skip),
      @return('ret)
  ) .

------------------------------------------------------------
--- 'TEE_CreatePersistentObject' Syscall
------------------------------------------------------------

  eq makeCall(CreatePersistentObject , (# STORID , # FILE , # DATAFLAGS , # HANDLE , # DATA , # DATASIZE , # OPTHANDLE)) 
   = apiCall(CreatePersistentObject , (fileId(FILE) , flags(DATAFLAGS) , handle(HANDLE) , data(DATA) , size(DATASIZE) , opt(OPTHANDLE))) .
  eq makeReturnStmt(CreatePersistentObject , RET , handle(HANDLE) , E) = 
    auto 'ret := # RET ;
    E := # HANDLE ; .

  op CreatePersistentObjectLib : -> Program .
  eq CreatePersistentObjectLib 
  = defineSysCall(
      int CreatePersistentObject(auto 'storageId, auto 'fileId, 
                                 auto 'dataFlags, auto 'handle, auto 'data, auto 'size, 
                                 auto * 'optHandle),                         --- signature 
      @inArgs('storageId, 'fileId, 'dataFlags, 'handle, 'data, 'size, 'optHandle),                   
      @outArgs('optHandle),                  
      @body(skip),
      @return('ret)                                                        --- return
  ) .

------------------------------------------------------------
--- 'TEE_CloseAndDeletePersistentObject1' Syscall
------------------------------------------------------------

  eq makeCall(CloseAndDeletePersistentObject1 , (# HANDLE)) = apiCall(CloseAndDeletePersistentObject1 , handle(HANDLE)) .
  eq makeReturnStmt(CloseAndDeletePersistentObject1 , RET , empty , (H)) = 
    auto 'ret := # RET ; . 
  
  eq makeReturnStmt(CloseAndDeletePersistentObject1 , RET , handle(HANDLE) , (H)) = 
    auto 'ret := # RET ;
    H := # HANDLE ; .

  op CloseAndDeletePersistentObjectLib : -> Program .
  eq CloseAndDeletePersistentObjectLib 
  = defineSysCall(
      int CloseAndDeletePersistentObject1(auto * 'handle),
      @inArgs('handle),                         --- should match with the makeCall              
      @outArgs('handle),                        --- should match with the makeReturnStmt
      @body(skip),
      @return('ret)
  ) .

------------------------------------------------------------
--- 'TEE_RenamePersistentObject' Syscall
------------------------------------------------------------

  eq makeCall(RenamePersistentObject , (# HANDLE , # FILE)) = apiCall(RenamePersistentObject , (handle(HANDLE) , fileId(FILE))) .
  eq makeReturnStmt(RenamePersistentObject , RET , empty , R) = $assign(# RET , R) .


  op PersistLibs : -> Program .
  eq PersistLibs = 
    OpenPersistentObjectLib
    CreatePersistentObjectLib 
    CloseAndDeletePersistentObjectLib

  .
endm

--- This module defines IMP call and return for generic object functions.

mod GENERIC-OBJECT-TEE-CALL is
  pr TEE-API-IMP-CALL .
  pr HANDLE .
  pr HANDLE-ID-GEN .
  pr ID-IMP-VALUE .
  pr RETURN-IMP-VALUE .
  pr GENERIC-OBJECT-FUNC .
  pr GENERIC-OBJECT-IMP-VALUE .
  pr PERSISTENT-OBJECT-IMP-VALUE .
  pr DATA-STREAM-OBJECT-IMP-VALUE .
  pr TEE-IMP-STRUCT-DECL .

  var HANDLE : HandleId .
  var RET : ReturnCode .
  var OBJTYPE : ObjectType .
  vars OBJSIZE MAXOBJSIZE : CryptoKeySize .
  var OBJUSAGES : Set{ObjectUsage} .
  var ID : AttrId .
  var V : AttrContent .
  var DATASIZE : DataSize .
  var DATAPOS : DataPosition .
  var DATAFLAGS : Set{DataFlag} .
  vars E E' : Exp .
  var EL : ExpList .

  eq makeCall(GetObjectInfo1 , (# HANDLE)) = apiCall(GetObjectInfo1 , handle(HANDLE)) .
  eq makeReturnStmt(GetObjectInfo1 , TEE-SUCCESS , info(teeObjectInfo(OBJTYPE , OBJSIZE , MAXOBJSIZE , OBJUSAGES , DATASIZE , DATAPOS , DATAFLAGS)) , (E , E')) 
  = $assign(# TEE-SUCCESS , E) 
    E' . objectType := # OBJTYPE ; E' . objectSize := # OBJSIZE ; E' . maxObjectSize := # MAXOBJSIZE ;
    E' . objectUsage := # OBJUSAGES ; E' . dataSize := # DATASIZE ; E' . dataPosition := # DATAPOS ; E' . handleFlags := # DATAFLAGS ; .  
  eq makeReturnStmt(GetObjectInfo1 , RET , empty , (E , E')) = $assign(# RET , E) .

  eq makeCall(RestrictObjectUsage1 , (# HANDLE , # OBJUSAGES)) = apiCall(RestrictObjectUsage1 , (handle(HANDLE) , usages(OBJUSAGES))) .
  eq makeReturnStmt(RestrictObjectUsage1 , RET , empty , E) = $assign(# RET , E) .

  eq makeCall(GetObjectBufferAttribute , (# HANDLE , # ID)) = apiCall(GetObjectBufferAttribute , (handle(HANDLE) , constId(ID))) .
  eq makeReturnStmt(GetObjectBufferAttribute , RET , constVal(V) , EL) = $assign((# RET , # V) , EL) .

  eq makeCall(GetObjectValueAttribute , (# HANDLE , # ID)) = apiCall(GetObjectValueAttribute , (handle(HANDLE) , constId(ID))) .
  eq makeReturnStmt(GetObjectValueAttribute , RET , constVal(V) , EL) = $assign((# RET , # V) , EL) .

  eq makeCall(CloseObject , (# HANDLE)) = apiCall(CloseObject , handle(HANDLE)) .
  eq makeReturnStmt(CloseObject , noReturnCode , empty , E) = skip .
  eq makeReturnStmt(CloseObject , noReturnCode , handle(TEE-HANDLE-NULL) , E) = skip .
endm

--- This module defines IMP call and return for persistent object enumeration functions.

mod ENUMERATOR-OBJECT-TEE-CALL is
  pr TEE-API-IMP-CALL .
  pr ENUMERATOR-OBJECT-FUNC .
  pr HANDLE .
  pr HANDLE-ID-GEN .
  pr ID-IMP-VALUE .
  pr RETURN-IMP-VALUE .
  pr GENERIC-OBJECT-IMP-VALUE .
  pr PERSISTENT-OBJECT-IMP-VALUE .
  pr DATA-STREAM-OBJECT-IMP-VALUE .
  pr TEE-IMP-STRUCT-DECL .

  var HANDLE : HandleId .
  var RET : ReturnCode .
  var STORID : StorageIdentifier .
  var OBJTYPE : ObjectType .
  vars OBJSIZE MAXOBJSIZE : CryptoKeySize .
  var OBJUSAGES : Set{ObjectUsage} .
  var DATASIZE : DataSize .
  var DATAPOS : DataPosition .
  var DATAFLAGS : Set{DataFlag} .
  var FILE : FileId .
  var E E' R : Exp .
  var EL : ExpList .

  eq makeCall(AllocatePersistentObjectEnumerator , nil) = apiCall(AllocatePersistentObjectEnumerator , empty) .
  eq makeReturnStmt(AllocatePersistentObjectEnumerator , RET , handle(HANDLE) , EL) = $assign((# RET , # HANDLE) , EL) .
  
  eq makeCall(FreePersistentObjectEnumerator , (# HANDLE)) = apiCall(FreePersistentObjectEnumerator , handle(HANDLE)) .
  eq makeReturnStmt(FreePersistentObjectEnumerator , noReturnCode , empty , E) = skip .
  eq makeReturnStmt(FreePersistentObjectEnumerator , noReturnCode , handle(TEE-HANDLE-NULL) , E) = skip .

  eq makeCall(ResetPersistentObjectEnumerator , (# HANDLE)) = apiCall(ResetPersistentObjectEnumerator , handle(HANDLE)) .
  eq makeReturnStmt(ResetPersistentObjectEnumerator , noReturnCode , empty , nil) = skip .

  eq makeCall(StartPersistentObjectEnumerator , (# HANDLE , # STORID)) = apiCall(StartPersistentObjectEnumerator , handle(HANDLE)) .
  eq makeReturnStmt(StartPersistentObjectEnumerator , RET , empty , E) = $assign(# RET , E) .

  eq makeCall(GetNextPersistentObject , (# HANDLE)) = apiCall(GetNextPersistentObject , handle(HANDLE)) .
  eq makeReturnStmt(GetNextPersistentObject , TEE-SUCCESS , (info(teeObjectInfo(OBJTYPE , OBJSIZE , MAXOBJSIZE , OBJUSAGES , DATASIZE , DATAPOS , DATAFLAGS)) , fileId(FILE)) , (R , E , E'))
    = $assign(# TEE-SUCCESS , R)
      E . objectType := # OBJTYPE ; E . objectSize := # OBJSIZE ; E . maxObjectSize := # MAXOBJSIZE ;
      E . objectUsage := # OBJUSAGES ; E . dataSize := # DATASIZE ; E . dataPosition := # DATAPOS ; E . handleFlags := # DATAFLAGS ;
      $assign(# FILE , E') .
  eq makeReturnStmt(GetNextPersistentObject , RET , empty , (R , E , E')) = $assign(# RET , R) .
endm

--- This module defines IMP call and return for data stream access functions.

mod DATA-STREAM-OBJECT-TEE-CALL is  
  pr TEE-API-IMP-CALL .
  pr DATA-STREAM-OBJECT-FUNC .
  pr HANDLE .
  pr ID-IMP-VALUE .
  pr RETURN-IMP-VALUE .
  pr PERSISTENT-OBJECT-IMP-VALUE .
  pr DATA-STREAM-OBJECT-IMP-VALUE .

  var HANDLE : HandleId .
  vars DATASIZE OFST : DataSize .
  var DATA : List{Data} .
  var WHENCE : SeekType .
  var RET : ReturnCode .
  vars E E' : Exp .
  var EL : ExpList .

  eq makeCall(ReadObjectData , (# HANDLE , # DATASIZE)) = apiCall(ReadObjectData , (handle(HANDLE) , size(DATASIZE))) .
  eq makeReturnStmt(ReadObjectData , TEE-SUCCESS , data(DATA) , EL) = $assign((# TEE-SUCCESS , # DATA) , EL) .
  eq makeReturnStmt(ReadObjectData , RET , empty , (E , E')) = $assign(# RET , E) .
  
  eq makeCall(WriteObjectData , (# HANDLE , # DATA)) = apiCall(WriteObjectData , (handle(HANDLE) , data(DATA))) .
  eq makeReturnStmt(WriteObjectData , RET , empty , E) = $assign(# RET , E) .
 
  eq makeCall(TruncateObjectData , (# HANDLE , # DATASIZE)) = apiCall(TruncateObjectData , (handle(HANDLE) , size(DATASIZE))) .
  eq makeReturnStmt(TruncateObjectData , RET , empty , E) = $assign(# RET , E) .

  eq makeCall(SeekObjectData , (# HANDLE , # OFST , # WHENCE)) = apiCall(SeekObjectData , (handle(HANDLE) , size(OFST) , type(WHENCE))) .
  eq makeReturnStmt(SeekObjectData , RET , empty , E) = $assign(# RET , E) .
endm

--- This module defines IMP call and return for cryptographic operation functions.

mod CRYPTO-OPERATION-TEE-CALL is  
  pr TEE-API-IMP-CALL .
  pr HANDLE .
  pr HANDLE-ID-GEN .
  pr ID-IMP-VALUE .
  pr CRYPTO-OPERATION-FUNC .
  --- pr CRYPTO-OPERATION .
  pr CRYPTO-OPERATION-OBJECT-IMP-VALUE .
  --- pr TRUST-APP .
  pr RETURN-IMP-VALUE .
  pr GENERIC-OBJECT-IMP-VALUE .
  pr PERSISTENT-OBJECT-IMP-VALUE .

  vars N N1 N2 : Nat .
  var TI : AppId .
  vars HANDLE HANDLE1 HANDLE2 : HandleId .
  var ALGO : AlgorithmIdentifier .
  var OM : OperationMode .
  var OC : OperationClass .
  vars OS OS1 OS2 : OperationState .
  var ATTRS : Set{TeeAttribute} .
  vars MAXKEYSIZE KEYSIZE : CryptoKeySize .
  var OBJTYPE : ObjectType .
  var OBJUSAGES : Set{ObjectUsage} .
  vars DATA DL IV MAC : List{Data} .
  --- var ELEM : CryptoElement .
  var RET : ReturnCode .
  vars E E' : Exp .
  var EL : ExpList .

--- Generic
  eq makeCall(AllocateOperation , (# ALGO , # OM , # KEYSIZE)) = apiCall(AllocateOperation , (alg(ALGO) , mode(OM) , size(KEYSIZE))) .
  eq makeReturnStmt(AllocateOperation , RET , handle(HANDLE) , EL) = $assign((# RET , # HANDLE) , EL) .
  eq makeReturnStmt(AllocateOperation , RET , empty , (E , E')) = $assign(# RET , E) .
  
  eq makeCall(FreeOperation , (# HANDLE)) = apiCall(FreeOperation , handle(HANDLE)) .
  eq makeReturnStmt(FreeOperation , noReturnCode , empty , E) = skip .
  eq makeReturnStmt(FreeOperation , noReturnCode , handle(TEE-HANDLE-NULL) , E) = skip .
  
  eq makeCall(ResetOperation , (# HANDLE)) = apiCall(ResetOperation , handle(HANDLE)) .
  eq makeReturnStmt(ResetOperation , noReturnCode , empty , nil) = skip .

  eq makeCall(SetOperationKey , (# HANDLE1 , # HANDLE2)) = apiCall(SetOperationKey , (handle(HANDLE1) , keyHandle(HANDLE2))) .
  eq makeReturnStmt(SetOperationKey , RET , empty , E) = $assign(# RET , E) .

--- TODO: NEED TO UPDATE RETURN
  eq makeCall(GetOperationInfo , (# HANDLE)) = apiCall(GetOperationInfo , handle(HANDLE)) .
  --- eq makeReturnStmt(GetOperationInfoReturn(void , teeOperationInfo()) , (E))
  --- = E . 'algorithm = # ALGO ; ... .

  --- eq makeCall(GetOperationInfoMultiple , (# HANDLE)) = GetOperationInfoMultipleCall(HANDLE) .
    --- eq makeReturnStmt(GetOperationInfoMultipleReturn(TEE-SUCCESS , teeOperationInfoMultiple()) , (E , E'))
  --- = $assign(# TEE-SUCCESS , E) ;
  ---   E' . 'algorithm = # ALGO ; ... .
  --- eq makeReturnStmt(GetOperationInfoMultipleReturn(RET) , (E , E')) = $assign(# RET , E) .

  --- eq makeCall(SetOperationKey2 , (# HANDLE , # HANDLE1 , # HANDLE2)) = SetOperationKey2Call(HANDLE , HANDLE1 , HANDLE2) .
  --- eq makeReturnStmt(SetOperationKey2Return(RET) , E) = $assign(# RET , E) .

  eq makeCall(CopyOperation , (# HANDLE1 , # HANDLE2)) = apiCall(CopyOperation , (trgHandle(HANDLE1) , srcHandle(HANDLE2))) .
  eq makeReturnStmt(CopyOperation , noReturnCode , empty , nil) = skip .

  --- eq makeCall(IsAlgorithmSupported , (# ALGO , # ELEM)) = IsAlgorithmSupportedCall(ALGO , ELEM) .
  --- eq makeReturnStmt(IsAlgorithmSupportedReturn(RET) , E) = $assign(# RET , E) .

--- Message Digest
  eq makeCall(DigestUpdate , (# HANDLE , # DATA)) = apiCall(DigestUpdate , (handle(HANDLE) , data(DATA))) .
  eq makeReturnStmt(DigestUpdate , noReturnCode , empty , nil) = skip .
  
  eq makeCall(DigestDoFinal , (# HANDLE , # DATA)) = apiCall(DigestDoFinal , (handle(HANDLE) , data(DATA))) .
  eq makeReturnStmt(DigestDoFinal , TEE-SUCCESS , data(DATA) , EL) = $assign((# TEE-SUCCESS , # DATA) , EL) .
  eq makeReturnStmt(DigestDoFinal , RET , empty , (E , E')) = $assign(# RET , E) .
  
  eq makeCall(DigestExtract , (# HANDLE)) = apiCall(DigestExtract , handle(HANDLE)) .
  eq makeReturnStmt(DigestExtract , RET , data(DL) , EL) = $assign((# RET , # DL) , EL) .

--- Symmetric Cipher
  eq makeCall(CipherInit , (# HANDLE , # IV)) = apiCall(CipherInit , (handle(HANDLE) , iv(IV))) .
  eq makeReturnStmt(CipherInit , noReturnCode , empty , nil) = skip .

  eq makeCall(CipherUpdate , (# HANDLE , # DL)) = apiCall(CipherUpdate , (handle(HANDLE) , data(DL))) .
  eq makeReturnStmt(CipherUpdate , RET , data(DL) , EL) = $assign((# RET , # DL) , EL) .
  eq makeReturnStmt(CipherUpdate , RET , empty , (E, E')) = $assign(# RET , E) .
  
  eq makeCall(CipherDoFinal , (# HANDLE , # DL)) = apiCall(CipherDoFinal , (handle(HANDLE) , data(DL))) .
  eq makeReturnStmt(CipherDoFinal , RET , data(DL) , EL) = $assign((# RET , # DL) , EL) .

--- MAC
  eq makeCall(MACInit , (# HANDLE , # IV)) = apiCall(MACInit , (handle(HANDLE) , iv(IV))) .
  eq makeReturnStmt(MACInit , noReturnCode , empty , nil) = skip .

  eq makeCall(MACUpdate , (# HANDLE , # DL)) = apiCall(MACUpdate , (handle(HANDLE) , data(DL))) .
  eq makeReturnStmt(MACUpdate , noReturnCode , empty , nil) = skip .

  eq makeCall(MACComputeFinal , (# HANDLE , # DL)) = apiCall(MACComputeFinal , (handle(HANDLE) , data(DL))) .
  eq makeReturnStmt(MACComputeFinal , RET , data(DL) , EL) = $assign((# RET , # DL) , EL) .

  eq makeCall(MACCompareFinal , (# HANDLE , # DL , # MAC)) = apiCall(MACCompareFinal , (handle(HANDLE) , data(DL) , mac(MAC))) .
  eq makeReturnStmt(MACCompareFinal , RET , empty , E) = $assign(# RET , E) .

--- AE
  eq makeCall(AEInit , (# HANDLE , # IV)) = apiCall(AEInit , (handle(HANDLE) , iv(IV))) .
  eq makeReturnStmt(AEInit , RET , empty , E) = $assign(# RET , E) .

  eq makeCall(AEUpdateAAD , (# HANDLE , # DL)) = apiCall(AEUpdateAAD , (handle(HANDLE) , data(DL))) .
  eq makeReturnStmt(AEUpdateAAD , noReturnCode , empty , E) = skip .

  eq makeCall(AEUpdate , (# HANDLE , # DL)) = apiCall(AEUpdate , (handle(HANDLE) , data(DL))) .
  eq makeReturnStmt(AEUpdate , RET , data(DL) , EL) = $assign((# RET , # DL) , EL) .

--- Asymmetic Cipher
  eq makeCall(AsymmetricEncrypt , (# HANDLE , # DL)) = apiCall(AsymmetricEncrypt , (handle(HANDLE) , data(DL))) .
  eq makeReturnStmt(AsymmetricEncrypt , RET , data(DL) , EL) = $assign((# RET , # DL) , EL) .

  eq makeCall(AsymmetricDecrypt , (# HANDLE , # DL)) = apiCall(AsymmetricDecrypt , (handle(HANDLE) , data(DL))) .
  eq makeReturnStmt(AsymmetricDecrypt , RET , data(DL) , EL) = $assign((# RET , # DL) , EL) .

  eq makeCall(AsymmetricDecrypt , (# HANDLE , # DL)) = apiCall(AsymmetricDecrypt , (handle(HANDLE) , data(DL))) .
  eq makeReturnStmt(AsymmetricDecrypt , RET , data(DL) , EL) = $assign((# RET , # DL) , EL) .

--- Misc
  eq makeCall(GenerateRandom , nil) = apiCall(GenerateRandom , empty) .
  eq makeReturnStmt(GenerateRandom , noReturnCode , data(DL) , E) = $assign(# DL , E) .
endm

--- This module defines IMP call and return for transient object functions.

mod TEE-INTERNAL-CLIENT-CALL is
  pr TEE-API-IMP-CALL .
  pr TEE-INTERNAL-CLIENT-FUNC .
  pr TEE-INTERNAL-CLIENT-IMP-VALUE .
  pr HANDLE .
  pr ID-IMP-VALUE .
  pr TEE-IMP-STRUCT-DECL .
  pr RETURN-IMP-VALUE .
  pr TEE-API-IMP-PROG-AUX .

  var EL : ExpList .
  var HANDLE : HandleId .
  var TA : AppId .
  var TO : TaCancelTimeOut .
  var RO : ReturnOrigin .
  var FUNC : FuncId .
  var VL : ValueList .
  vars E E1 E2 E3 : Exp .
  var RET : ReturnCode .
  vars V V1 V2 V3 V4 : Value .

  eq makeCall(TeeOpenTASession , (# TA , # TO )) = apiCall(TeeOpenTASession , (uuid(TA) , taCancelReqTime(TO))) .
  eq makeReturnStmt(TeeOpenTASession , TEE-SUCCESS , (handle(HANDLE) , returnOrig(RO)) , EL) = $assign((# TEE-SUCCESS , # HANDLE , # RO) , EL) .

  op TeeOpenTASessionLib : -> Program .
  eq TeeOpenTASessionLib 
  = defineSysCall(
      int TeeOpenTASession(auto 'dest, auto 'TO, auto * 'code, auto * 'handle, auto * 'orig),
      @inArgs('dest, 'TO),                   
      @outArgs('code, 'handle, 'orig),       
      @body(skip),            
      @return(# 1)
  ) .

  eq makeCall(TeeInvokeTACommand , (# HANDLE , # FUNC , VL)) = apiCall(TeeInvokeTACommand , (handle(HANDLE) , funcId(FUNC) , values(VL))) .
  eq makeReturnStmt(TeeInvokeTACommand , RET , values(V) , (E1 , E2)) = 
    auto 'ret := # RET ;
    E2 := # TEE-ORIGIN-TRUSTED-APP ;
    E1 := V ; .

  op TeeInvokeTACommandLib : -> Program .
  eq TeeInvokeTACommandLib 
  = defineSysCall(
      int TeeInvokeTACommand(auto * 'sess, auto 'cmd, auto * 'params, auto * 'orig),
      @inArgs('sess, 'cmd, 'params),                  
      @outArgs('params, 'orig),                
      @body(skip),    
      @return('ret)
  ) .

  op SessionLibs : -> Program .
  eq SessionLibs = 
    TeeOpenTASessionLib 
    TeeInvokeTACommandLib
  .
endm

mod TEE-API-IMP-PROGRAM is
  pr TRANSIENT-OBJECT-TEE-CALL .
  pr PERSISTENT-OBJECT-TEE-CALL .
  pr TEE-INTERNAL-CLIENT-CALL .

  op Params : -> Type [ctor] .

  op syscalls : -> Program .
  eq syscalls =
    struct Params {
      int param1 ;
      int param2 ;
      int param3 ;
      int param4 ;
    } ;

    TransientLibs
    PersistLibs
    SessionLibs 
  .

endm